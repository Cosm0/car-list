{"ast":null,"code":"import { enviroment } from \"src/environments/environment\";\nimport { BehaviorSubject, Subject, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = enviroment.apiUrl;\n    this.signInEndpointUrl = enviroment.signInUrl;\n    this.signInSub = new Subject();\n    this.userSub = new BehaviorSubject(null);\n    this.sessionStorageUserKey = 'user';\n    this.signIn$ = this.signInSub.asObservable();\n    this.user$ = this.userSub.asObservable();\n    this.autoSignIn();\n  }\n  signInTrigger(username, password) {\n    this.signInSub.next({\n      username,\n      password\n    });\n  }\n  signOut() {\n    this.userSub.next(null);\n    this.clearUserDataFromStorage();\n    this.router.navigate(['/sign-in']);\n    if (this.autoSignOutTimeout) {\n      clearTimeout(this.autoSignOutTimeout);\n    }\n  }\n  signIn(username, password) {\n    return this.http.post(`${this.apiUrl}${this.signInEndpointUrl}`, {\n      username,\n      password\n    }).pipe(tap(resp => {\n      this.handleAuth(resp);\n    }));\n  }\n  handleAuth(authResp) {\n    const user = {\n      username: authResp.username,\n      id: authResp.id,\n      authToken: authResp.authToken,\n      expiresOn: new Date(authResp.expiresOn),\n      issuedAt: new Date(authResp.issuedAt)\n    };\n    const now = new Date();\n    this.setAutoSignOut(new Date(authResp.expiresOn).getTime() - Date.now());\n    this.userSub.next(user);\n    sessionStorage.setItem(this.sessionStorageUserKey, JSON.stringify(user));\n  }\n  autoSignIn() {\n    const userData = sessionStorage.getItem(this.sessionStorageUserKey);\n    if (!userData) return;\n    const parsedUserData = JSON.parse(userData);\n    const user = {\n      ...parsedUserData,\n      tokenExpiresOn: new Date(parsedUserData.tokenExpiresOn)\n    };\n    if (user.expiresOn > new Date()) {\n      this.setAutoSignOut(user.expiresOn.getTime() - new Date().getTime());\n      this.userSub.next(user);\n    }\n  }\n  setAutoSignOut(expireDuration) {\n    this.autoSignOutTimeout = setTimeout(() => {\n      this.userSub.next(null);\n      this.clearUserDataFromStorage();\n    }, expireDuration);\n  }\n  clearUserDataFromStorage() {\n    sessionStorage.removeItem(this.sessionStorageUserKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,8BAA8B;AACzD,SAASC,eAAe,EAAcC,OAAO,EAAEC,GAAG,QAAQ,MAAM;;;;AAShE,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAV5C,WAAM,GAAGP,UAAU,CAACQ,MAAM;IAC1B,sBAAiB,GAAGR,UAAU,CAACS,SAAS;IACxC,cAAS,GAAG,IAAIP,OAAO,EAA2C;IAClE,YAAO,GAAG,IAAID,eAAe,CAAO,IAAI,CAAC;IACzC,0BAAqB,GAAG,MAAM;IAGtC,YAAO,GAAG,IAAI,CAACS,SAAS,CAACC,YAAY,EAAE;IACvC,UAAK,GAAG,IAAI,CAACC,OAAO,CAACD,YAAY,EAAE;IAGjC,IAAI,CAACE,UAAU,EAAE;EACnB;EAEAC,aAAa,CAACC,QAAgB,EAAEC,QAAgB;IAC9C,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EAC7C;EAEAE,OAAO;IACL,IAAI,CAACN,OAAO,CAACK,IAAI,CAAC,IAAI,CAAC;IACvB,IAAI,CAACE,wBAAwB,EAAE;IAC/B,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;IAElC,IAAG,IAAI,CAACC,kBAAkB,EAAE;MAC1BC,YAAY,CAAC,IAAI,CAACD,kBAAkB,CAAC;;EAEzC;EAEAE,MAAM,CAACR,QAAgB,EAAEC,QAAgB;IACvC,OAAO,IAAI,CAACV,IAAI,CAACkB,IAAI,CAAiB,GAAG,IAAI,CAAChB,MAAM,GAAG,IAAI,CAACiB,iBAAiB,EAAE,EAAE;MAC/EV,QAAQ;MACRC;KACD,CAAC,CAACU,IAAI,CACLvB,GAAG,CAAEwB,IAAoB,IAAI;MAC3B,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC;IACvB,CAAC,CACF,CAAC;EACJ;EAEQC,UAAU,CAACC,QAAwB;IACzC,MAAMC,IAAI,GAAS;MACjBf,QAAQ,EAAEc,QAAQ,CAACd,QAAQ;MAC3BgB,EAAE,EAAEF,QAAQ,CAACE,EAAE;MACfC,SAAS,EAAEH,QAAQ,CAACG,SAAS;MAC7BC,SAAS,EAAE,IAAIC,IAAI,CAACL,QAAQ,CAACI,SAAS,CAAC;MACvCE,QAAQ,EAAE,IAAID,IAAI,CAACL,QAAQ,CAACM,QAAQ;KACrC;IACD,MAAMC,GAAG,GAAG,IAAIF,IAAI,EAAE;IACtB,IAAI,CAACG,cAAc,CAAC,IAAIH,IAAI,CAACL,QAAQ,CAACI,SAAS,CAAC,CAACK,OAAO,EAAE,GAAGJ,IAAI,CAACE,GAAG,EAAE,CAAC;IACxE,IAAI,CAACxB,OAAO,CAACK,IAAI,CAACa,IAAI,CAAC;IACvBS,cAAc,CAACC,OAAO,CAAC,IAAI,CAACC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;EAC1E;EAEQjB,UAAU;IAChB,MAAM+B,QAAQ,GAAGL,cAAc,CAACM,OAAO,CAAC,IAAI,CAACJ,qBAAqB,CAAC;IACnE,IAAI,CAACG,QAAQ,EAAE;IACf,MAAME,cAAc,GAAGJ,IAAI,CAACK,KAAK,CAACH,QAAQ,CAAC;IAC3C,MAAMd,IAAI,GAAS;MACjB,GAAGgB,cAAc;MACjBE,cAAc,EAAE,IAAId,IAAI,CAACY,cAAc,CAACE,cAAc;KACvD;IAED,IAAGlB,IAAI,CAACG,SAAS,GAAG,IAAIC,IAAI,EAAE,EAAE;MAC9B,IAAI,CAACG,cAAc,CAACP,IAAI,CAACG,SAAS,CAACK,OAAO,EAAE,GAAG,IAAIJ,IAAI,EAAE,CAACI,OAAO,EAAE,CAAC;MACpE,IAAI,CAAC1B,OAAO,CAACK,IAAI,CAACa,IAAI,CAAC;;EAE3B;EAEQO,cAAc,CAACY,cAAsB;IAC3C,IAAI,CAAC5B,kBAAkB,GAAG6B,UAAU,CAAC,MAAK;MACxC,IAAI,CAACtC,OAAO,CAACK,IAAI,CAAC,IAAI,CAAC;MACvB,IAAI,CAACE,wBAAwB,EAAE;IACjC,CAAC,EAAE8B,cAAc,CAAC;EACpB;EAEQ9B,wBAAwB;IAC9BoB,cAAc,CAACY,UAAU,CAAC,IAAI,CAACV,qBAAqB,CAAC;EACvD;;AA9EWrC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgD,SAAXhD,WAAW;EAAAiD,YAFV;AAAM","names":["enviroment","BehaviorSubject","Subject","tap","AuthService","constructor","http","router","apiUrl","signInUrl","signInSub","asObservable","userSub","autoSignIn","signInTrigger","username","password","next","signOut","clearUserDataFromStorage","navigate","autoSignOutTimeout","clearTimeout","signIn","post","signInEndpointUrl","pipe","resp","handleAuth","authResp","user","id","authToken","expiresOn","Date","issuedAt","now","setAutoSignOut","getTime","sessionStorage","setItem","sessionStorageUserKey","JSON","stringify","userData","getItem","parsedUserData","parse","tokenExpiresOn","expireDuration","setTimeout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/ppodsiadlik/repo-prv/car-list/front/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { enviroment } from \"src/environments/environment\";\nimport { BehaviorSubject, Observable, Subject, tap } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\n\nimport { User } from \"./User.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = enviroment.apiUrl;\n  private signInEndpointUrl = enviroment.signInUrl;\n  private signInSub = new Subject<{ username: string; password: string; }>();\n  private userSub = new BehaviorSubject<User>(null);\n  private sessionStorageUserKey = 'user';\n  private autoSignOutTimeout;\n\n  signIn$ = this.signInSub.asObservable();\n  user$ = this.userSub.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.autoSignIn();\n  }\n\n  signInTrigger(username: string, password: string): void {\n    this.signInSub.next({ username, password });\n  }\n\n  signOut() {\n    this.userSub.next(null);\n    this.clearUserDataFromStorage();\n    this.router.navigate(['/sign-in']);\n\n    if(this.autoSignOutTimeout) {\n      clearTimeout(this.autoSignOutTimeout);\n    }\n  }\n\n  signIn(username: string, password: string): Observable<SignInResponse> {\n    return this.http.post<SignInResponse>(`${this.apiUrl}${this.signInEndpointUrl}`, {\n      username,\n      password,\n    }).pipe(\n      tap((resp: SignInResponse) => {\n        this.handleAuth(resp);\n      }\n    ))\n  }\n\n  private handleAuth(authResp: SignInResponse) {\n    const user: User = {\n      username: authResp.username,\n      id: authResp.id,\n      authToken: authResp.authToken,\n      expiresOn: new Date(authResp.expiresOn),\n      issuedAt: new Date(authResp.issuedAt),\n    };\n    const now = new Date();\n    this.setAutoSignOut(new Date(authResp.expiresOn).getTime() - Date.now())\n    this.userSub.next(user);\n    sessionStorage.setItem(this.sessionStorageUserKey, JSON.stringify(user));\n  }\n\n  private autoSignIn() {\n    const userData = sessionStorage.getItem(this.sessionStorageUserKey);\n    if (!userData) return;\n    const parsedUserData = JSON.parse(userData);\n    const user: User = {\n      ...parsedUserData,\n      tokenExpiresOn: new Date(parsedUserData.tokenExpiresOn)\n    };\n\n    if(user.expiresOn > new Date()) {\n      this.setAutoSignOut(user.expiresOn.getTime() - new Date().getTime())\n      this.userSub.next(user);\n    }\n  }\n\n  private setAutoSignOut(expireDuration: number) { // expireDuration in milliseconds\n    this.autoSignOutTimeout = setTimeout(() => {\n      this.userSub.next(null);\n      this.clearUserDataFromStorage();\n    }, expireDuration)\n  }\n\n  private clearUserDataFromStorage() {\n    sessionStorage.removeItem(this.sessionStorageUserKey);\n  }\n}\n\nexport interface SignInResponse {\n  id: string;\n  username: string;\n  authToken: string;\n  expiresOn: Date;\n  issuedAt: Date;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}