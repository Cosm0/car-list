{"ast":null,"code":"import { enviroment } from \"src/environments/environment\";\nimport { BehaviorSubject, Subject, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = enviroment.signInUrl;\n    this.signInSub = new Subject();\n    this.userSub = new BehaviorSubject(null);\n    this.sessionStorageUserKey = 'user';\n    this.signIn$ = this.signInSub.asObservable();\n    this.user$ = this.userSub.asObservable();\n    this.autoSignIn();\n  }\n  signInTrigger(email, password) {\n    this.signInSub.next({\n      email,\n      password\n    });\n  }\n  signOut() {\n    this.userSub.next(null);\n    this.clearUserDataFromStorage();\n    this.router.navigate(['/sign-in']);\n    if (this.autoSignOutTimeout) {\n      clearTimeout(this.autoSignOutTimeout);\n    }\n  }\n  signIn(username, password) {\n    return this.http.post(this.url, {\n      username,\n      password,\n      returnSecureToken: true\n    }).pipe(tap(resp => {\n      this.handleAuth(resp);\n    }));\n  }\n  handleAuth(authResp) {\n    const user = {\n      username: authResp.username,\n      id: authResp.id,\n      authToken: authResp.authToken,\n      expiresOn: new Date(new Date().getTime() + +authResp.expiresOn * 1000),\n      issuedAt: new Date(new Date().getTime() + +authResp.issuedAt * 1000)\n    };\n    this.setAutoSignOut(+authResp.expiresIn * 1000);\n    this.userSub.next(user);\n    sessionStorage.setItem(this.sessionStorageUserKey, JSON.stringify(user));\n  }\n  autoSignIn() {\n    const userData = sessionStorage.getItem(this.sessionStorageUserKey);\n    if (!userData) return;\n    const parsedUserData = JSON.parse(userData);\n    const user = {\n      ...parsedUserData,\n      tokenExpiresOn: new Date(parsedUserData.tokenExpiresOn)\n    };\n    if (user.tokenExpiresOn > new Date()) {\n      this.setAutoSignOut(user.tokenExpiresOn.getTime() - new Date().getTime());\n      this.userSub.next(user);\n    }\n  }\n  setAutoSignOut(expireDuration) {\n    this.autoSignOutTimeout = setTimeout(() => {\n      this.userSub.next(null);\n      this.clearUserDataFromStorage();\n    }, expireDuration);\n  }\n  clearUserDataFromStorage() {\n    sessionStorage.removeItem(this.sessionStorageUserKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["enviroment","BehaviorSubject","Subject","tap","AuthService","constructor","http","router","signInUrl","signInSub","asObservable","userSub","autoSignIn","signInTrigger","email","password","next","signOut","clearUserDataFromStorage","navigate","autoSignOutTimeout","clearTimeout","signIn","username","post","url","returnSecureToken","pipe","resp","handleAuth","authResp","user","id","authToken","expiresOn","Date","getTime","issuedAt","setAutoSignOut","expiresIn","sessionStorage","setItem","sessionStorageUserKey","JSON","stringify","userData","getItem","parsedUserData","parse","tokenExpiresOn","expireDuration","setTimeout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/ppodsiadlik/repo-prv/car-list/front/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { enviroment } from \"src/environments/environment\";\nimport { BehaviorSubject, Observable, Subject, tap } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\n\nimport { User } from \"./User.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private url = enviroment.signInUrl;\n  private signInSub = new Subject<{ email: string; password: string; }>();\n  private userSub = new BehaviorSubject<User>(null);\n  private sessionStorageUserKey = 'user';\n  private autoSignOutTimeout;\n\n  signIn$ = this.signInSub.asObservable();\n  user$ = this.userSub.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.autoSignIn();\n  }\n\n  signInTrigger(email: string, password: string): void {\n    this.signInSub.next({ email, password });\n  }\n\n  signOut() {\n    this.userSub.next(null);\n    this.clearUserDataFromStorage();\n    this.router.navigate(['/sign-in']);\n\n    if(this.autoSignOutTimeout) {\n      clearTimeout(this.autoSignOutTimeout);\n    }\n  }\n\n  signIn(username: string, password: string): Observable<SignInResponse> {\n    return this.http.post<SignInResponse>(this.url, {\n      username,\n      password,\n      returnSecureToken: true,\n    }).pipe(\n      tap((resp: SignInResponse) => {\n        this.handleAuth(resp);\n      }\n    ))\n  }\n\n  private handleAuth(authResp: SignInResponse) {\n    const user: User = {\n      username: authResp.username,\n      id: authResp.id,\n      authToken: authResp.authToken,\n      expiresOn: new Date(new Date().getTime() + +authResp.expiresOn * 1000),\n      issuedAt: new Date(new Date().getTime() + +authResp.issuedAt * 1000),\n    };\n    this.setAutoSignOut(+authResp.expiresIn * 1000)\n    this.userSub.next(user);\n    sessionStorage.setItem(this.sessionStorageUserKey, JSON.stringify(user));\n  }\n\n  private autoSignIn() {\n    const userData = sessionStorage.getItem(this.sessionStorageUserKey);\n    if (!userData) return;\n    const parsedUserData = JSON.parse(userData);\n    const user: User = {\n      ...parsedUserData,\n      tokenExpiresOn: new Date(parsedUserData.tokenExpiresOn)\n    };\n\n    if(user.tokenExpiresOn > new Date()) {\n      this.setAutoSignOut(user.tokenExpiresOn.getTime() - new Date().getTime())\n      this.userSub.next(user);\n    }\n  }\n\n  private setAutoSignOut(expireDuration: number) { // expireDuration in milliseconds\n    this.autoSignOutTimeout = setTimeout(() => {\n      this.userSub.next(null);\n      this.clearUserDataFromStorage();\n    }, expireDuration)\n  }\n\n  private clearUserDataFromStorage() {\n    sessionStorage.removeItem(this.sessionStorageUserKey);\n  }\n}\n\nexport interface SignInResponse {\n  id: string;\n  username: string;\n  authToken: string;\n  expiresOn: Date;\n  issuedAt: Date;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}