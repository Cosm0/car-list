{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { exhaustMap, take } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptor {\n  constructor(authSerivce) {\n    this.authSerivce = authSerivce;\n  }\n  intercept(req, next) {\n    return this.authSerivce.user$.pipe(take(1), exhaustMap(user => {\n      if (!user) {\n        return next.handle(req);\n      }\n      const authenticatedRequest = req.clone({\n        params: new HttpParams().set('auth', user.id)\n      });\n      return next.handle(authenticatedRequest);\n    }));\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAkDA,UAAU,QAAqB,sBAAsB;AAEvG,SAAqBC,UAAU,EAAEC,IAAI,QAAQ,MAAM;;;AAInD,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAO,IAAI,CAACH,WAAW,CAACI,KAAK,CAACC,IAAI,CAChCR,IAAI,CAAC,CAAC,CAAC,EACPD,UAAU,CAAEU,IAAI,IAAI;MAClB,IAAI,CAACA,IAAI,EAAE;QACT,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;;MAEzB,MAAMM,oBAAoB,GAAGN,GAAG,CAACO,KAAK,CAAC;QAACC,MAAM,EAAE,IAAIf,UAAU,EAAE,CAACgB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,EAAE;MAAC,CAAC,CAAC;MACvF,OAAOT,IAAI,CAACI,MAAM,CAACC,oBAAoB,CAAC;IAC1C,CAAC,CAAC,CACH;EACH;;AAdWV,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAe,SAAff,eAAe;AAAA","names":["HttpParams","exhaustMap","take","AuthInterceptor","constructor","authSerivce","intercept","req","next","user$","pipe","user","handle","authenticatedRequest","clone","params","set","id","factory"],"sourceRoot":"","sources":["/home/ppodsiadlik/repo-prv/car-list/front/src/app/auth/auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpParams, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, exhaustMap, take } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authSerivce: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.authSerivce.user$.pipe(\n      take(1),\n      exhaustMap((user) => {\n        if (!user) {\n          return next.handle(req);\n        }\n        const authenticatedRequest = req.clone({params: new HttpParams().set('auth', user.id)});\n        return next.handle(authenticatedRequest)\n      }),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}